---
title: "Financial/Economic Data using TidyQuant"
author: "Aaron Kessler"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
    theme: yeti
---

```{r setup, include=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(tidyquant)


```

To gather and analyze financial data, we'll explore using the `tidyquant` package - which allows us to directly download data on measures like stock prices as well as economic indicators from the Fed.

Assign the stock ticker/symbol for the company we're interested in exploring.

```{r}

ticker <- "MSFT"  

```

Use the `tq_get()` function to download the stock data.

This function returns a data frame containing the date, open, high, low, and close prices for each day. For example:

```{r}

stock_data <- tq_get(ticker, get = "stock.prices", from = "2022-01-01")

stock_data

```

As you can see above, we can specify how far back we want the data to go. (You can also optionally set and end by using `to =` ... if you don't, it just defaults to the most recent day.)

Now here's where it gets even more interesting and powerful... Let's say instead of daily prices, you wish you could look at it on a monthly basis. Or annually. Or weekly. Well you could write some custom code yourself aimed at pulling out just the records for the last day of the month -- but you don't have to come up with that: tidyquant has done it for you using its `tq_transmute()` function. (The function uses the powers of other financial packages such as xts, quantmod and TTR under the hood.)

Modify our data to be monthly instead, based on the last closing price of the month.

```{r}

stocks_monthly <- stock_data %>%
    group_by(symbol) %>%
    tq_transmute(select = close, 
                 mutate_fun = to.monthly, 
                 indexAt = "lastof")

stocks_monthly

```

Want to try annually instead? It's just a matter of one small tweak. Check it out...

```{r}

stock_data %>%
    group_by(symbol) %>%
    tq_transmute(select = close, 
                 mutate_fun = to.yearly, #here's the change
                 indexAt = "lastof")


```
Now of course, just a couple years of annual data isn't very illuminating. But if we want to go back to start earlier in time, it's as simple as just asking R for it.

```{r}

stock_data_from2000 <- tq_get(ticker, get = "stock.prices", from = "2000-01-01")

stock_data_from2000

```




```{r}

stock_data_from2000 %>%
    group_by(symbol) %>%
    tq_transmute(select = close, 
                 mutate_fun = to.yearly, #here's the change
                 indexAt = "lastof")



```

Keep in mind, depending on the use case, and as you get more comfortable with this, 
you can combine some of these steps together...

```{r}

tq_get(ticker, get = "stock.prices", from = "2000-01-01") %>%
    group_by(symbol) %>%
    tq_transmute(select = close, 
                 mutate_fun = to.yearly, #here's the change
                 indexAt = "lastof")


```

There are all kinds of other questions we can ponder, and then pull together using 
relatively straightforward functions (all things considered).

Let's say now that we have data going back to 2000, we'd like to also calculate
what the annual return was for our company's stock. We can do that like this:

```{r}

# calculate monthly return of multiple stocks
stock_data_from2000 %>%
  tq_transmute(select = close,
               mutate_fun = periodReturn,
               period = "yearly",
               col_rename = "annual_return")



```

Want to see monthly returns instead? It's as simple as doing:

```{r}

stock_data_from2000 %>%
  tq_transmute(select = close,
               mutate_fun = periodReturn,
               period = "monthly", #here's the change
               col_rename = "monthly_return")


```

Want to visualize the returns? We can do that too, using the ggplot2 package augmented
by tidyquant.

First let's make sure we've saved our annual return dataset as a new named object.

```{r}
annualreturns_data <- stock_data_from2000 %>%
  tq_transmute(select = close,
               mutate_fun = periodReturn,
               period = "yearly", #here's the change
               col_rename = "annual_return")

annualreturns_data

```

Now we'll create the chart.

```{r}

annualreturns_data %>%
    ggplot(aes(x = year(date), y = annual_return)) +
    geom_col() +
    labs(title = "Annual Returns", 
         subtitle = "2000 through the present",
         y = "Returns", x = "", color = "") +
    scale_y_continuous(labels = scales::percent) +
    coord_flip() +
    theme_tq() 

```


What other kinds of visualizations can we do?
How about we create a line chart of the stock's closing price over time. We can do this by using the `geom_line()` function of ggplot2. To simplify we'll use our original stock data from 2020. For example:

```{r}

ggplot(stock_data, aes(x = date, y = close)) +
  geom_line()
```

If we wanted to add some labels...

```{r}
stock_data %>%
  ggplot(aes(x = date, y = close)) +
  geom_line() +
  labs(title = "Stock Price", y = "Closing Price", x = "")
```
Now once again, we have some very helpful financial measures built in to tidyquant.
Let's say we'd like to smooth things out here a bit, and calculate a moving average?
The `geom_ma()` function delivers it for us.
```{r}
# simple moving averages

aapl_prices %>%
  ggplot(aes(x = date, y = close)) +
  geom_line() +
  labs(title = "Apple Stock Price", y = "Closing Price", x = "") +
  geom_ma(ma_fun = SMA, n = 50, color = "red", size = 1.25) +
  theme_minimal()
```

```{r}
### multiple companies


#with only a start and no end date
mycompanies  <- tq_get(c("AAPL", "MSFT", "NYT", "XOM"), 
                       get = "stock.prices", 
                       from = "2022-01-01")
mycompanies 

mycompanies %>% 
  count(symbol)
```

```{r}
mycompanies %>%
  ggplot(aes(x = date, y = close)) +
  geom_line() +
  labs(title = "", y = "Closing Price", x = "") +
  facet_wrap(~ symbol, ncol = 2, scale = "free_y")
```

```{r}
# simple moving averages

mycompanies %>%
  ggplot(aes(x = date, y = close)) +
  geom_line() +
  labs(title = "", y = "Closing Price", x = "") +
  geom_ma(ma_fun = SMA, n = 50, color = "red", size = 1.25) +
  facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
  theme_minimal()
```

```{r}
# FRED Economic Data
# A wealth of economic data can be extracted from the Federal Reserve Economic Data (FRED) database. The FRED contains over 10K data sets that are free to use. See the FRED categories to narrow down the data base and to get data codes. 
# categories: https://fred.stlouisfed.org/categories
```

```{r}
# US Regular All Formulations Gas Price (GASREGW), weekly
gasprices_weekly <- tq_get("GASREGW", get = "economic.data", from = "2022-01-01")
gasprices_weekly
```

```{r}
ggplot(gasprices_weekly, aes(x = date, y = price)) +
  geom_line(color = "darkred") +
  theme_minimal()
```

```{r}
# 30 year mortgage rate average, weekly
mortgate_30yr_weekly <- tq_get("MORTGAGE30US", get = "economic.data", from = "2022-01-01")
mortgate_30yr_weekly
```
